# Basic Class and Object Exercises  

class Person:  
    def __init__(self, name, age):  
        self.name = name  
        self.age = age  

    def greet(self):  
        print(f"Hello, my name is {self.name}.")  

class Car:  
    def __init__(self, make, model, year):  
        self.make = make  
        self.model = model  
        self.year = year  

    def print_details(self):  
        print(f"Car: {self.year} {self.make} {self.model}")  

class Circle:  
    def __init__(self, radius):  
        self.radius = radius  

    def compute_area(self):  
        return 3.14 * (self.radius ** 2)  

class Rectangle:  
    def __init__(self, length, width):  
        self.length = length  
        self.width = width  

    def compute_area(self):  
        return self.length * self.width  

    def compute_perimeter(self):  
        return 2 * (self.length + self.width)  

class Animal:  
    def speak(self):  
        pass  
class Dog(Animal):  
    def speak(self):  
        return "Woof!"  
class Cat(Animal):  
    def speak(self):  
        return "Meow!"  
hi= Dog()
print(hi.speak())



class Shape:  
    def area(self):  
        pass  
class Square(Shape):  
    def __init__(self, base):  
        self.base = base
    def Square_area(self):
        return self.base ** 2
class Triangle(Shape):  
    def __init__(self, base, height):  
        self.base = base  
        self.height = height  
    def Triangle_area(self):  
        return 0.5 * self.base * self.height 
m= Square(4)
print(m.Square_area())
N= Triangle(2,4)
print(N.Triangle_area())


class Employee:
    def __init__(self, name, salary):
        self.name = name
        self.salary = salary
class Manager(Employee):
    def __init__(self, name, salary, department):
        super().__init__(name, salary)
        self.department = department
employee1 = Employee("John Doe", 50000)
manager1 = Manager("Jane Smith", 80000, "Marketing")
print(employee1.name)
print(manager1.department)



class Vehicle:
    def drive(self):
        pass
class Bike(Vehicle):
    def drive(self):
        return "Bike is driving."
class Truck(Vehicle):
    def drive(self):
        return "Truck is driving."
n= Bike()
print(n.drive())
m= Truck()
print(m.drive())


class Bird:
    def fly(self):
        pass

class Eagle(Bird):
    def fly(self):
        return "Eagle is flying."

class Penguin(Bird):
    def fly(self):
        return "Penguins cannot fly."
BE= Eagle()
print(BE.fly())
BP=Penguin()
print(BP.fly())

class Account:
    def __init__(self, balance):
        self.balance = balance
    def deposit(self, amount):
        self.balance += amount
    def withdraw(self, amount):
        if amount <= self.balance:
            self.balance -= amount
    def check_balance(self):
        return self.balance
n=Account(100)
n.withdraw(80)
print(n.check_balance())


class Book:
    def __init__(self, title, author, pages):
        self.__title = title
        self.__author = author
        self.__pages = pages
    def get_title(self):
        return self.__title
    def set_title(self, title):
        self.__title = title
n=Book("amir chror", "Mustafa", 22)
n.set_title("AHMAD")
print(n.get_title())



class Laptop:  
    def __init__(self, brand, model, price):  
        self.__brand = brand  
        self.__model = model  
        self.__price = price  
    def apply_discount(self, discount):  
        self.__price -= discount  
    def display_details(self):  
        return f"Laptop: {self.__brand} {self.__model}, Price: {self.__price}"
la=Laptop("DELL","mustafa", 3550)
print(la.display_details())




class BankAccount:
    def __init__(self, account_number):
        self.__account_number = account_number
        self.__balance = 0

    def deposit(self, amount):
        self.__balance += amount

    def withdraw(self, amount):
        if amount <= self.__balance:
            self.__balance -= amount

    def check_balance(self):
        return self.__balance
bk =BankAccount("0793570058")
bk.withdraw(80)
print(bk.check_balance())



class Student:
    def __init__(self, name, grade, age):
        self.__name = name
        self.__grade = grade
        self.__age = age
    def get_details(self):
        return self.__name, self.__grade, self.__age
    def set_details(self, name, grade, age):
        self.__name = name
        self.__grade = grade
        self.__age = age
st= Student("Mustafa", 1, 18)
print(st.get_details())


class Library:  
    def __init__(self, name):  
        self.name = name  
        self.books = ["ahmad", "mohammad", "khalid"]
    def add_book(self, book):  
        self.books.append(book)  
    def remove_book(self, book):  
        self.books.remove(book)
    def display(self):
        return f"library:{self.books}"
n = Library("Mustafa Stanikzai")
n.add_book("jjj")
print(n.display())


class School:  
    def __init__(self, name):  
        self.name = name  
        self.students = ["ahmad", "mohammad", "khalid"]  

    def add_student(self, student):  
        self.students.append(student)  

    def remove_student(self, student):  
        self.students.remove(student)
    def display(self):
        return f"Hanzilla School{self.students}"
n=School("Mustafa")
n.add_student("haris")
print(n.display())


class Team:  
    def __init__(self, name):  
        self.name = name  
        self.members = ["ahmad", "mohammad", "khalid"]  

    def add_member(self, person):  
        self.members.append(person)  

    def remove_member(self, person):  
        self.members.remove(person)  
    def display(self):
        return f"cricket team{self.members}"
n= Team("Cricket")
n.add_member("haris")
print(n.display())


class Company:  
    def __init__(self, name):  
        self.name = name  
        self.employees = ["ahmad", "mohammad", "khalid"]  

    def add_employee(self, employee):  
        self.employees.append(employee)  

    def remove_employee(self, employee):  
        self.employees.remove(employee)  
    def display(self):
        return f"employee{self.employees}"
n=Company("Mustafa")
n.add_employee("haris")
print(n.display())


class Zoo:  
    def __init__(self, name):  
        self.name = name  
        self.animals = ["cow", "donkey", "sheep"]  

    def add_animal(self, animal):  
        self.animals.append(animal)  

    def remove_animal(self, animal):  
        self.animals.remove(animal)  
    def display(self):
            return f"animals{self.animals}"
n= Zoo("Kabul")
n.add_animal("goat")
print(n.display())



# File Handling and Exceptions Exercises  

class FileManager:  
    @staticmethod  
    def read_file(file_path):  
        with open(file_path, 'r') as file:  
            return file.read()  

    @staticmethod  
    def write_file(file_path, content):  
        with open(file_path, 'w') as file:  
            file.write(content)  

class Log:  
    @staticmethod  
    def write_error(message):  
        with open('error_log.txt', 'a') as log_file:  
            log_file.write(message + '\n')  

class Config:  
    def __init__(self, file_path):  
        self.file_path = file_path  
        self.settings = self.read_config()  

    def read_config(self):  
        with open(self.file_path, 'r') as file:  
            return file.readlines()  

    def get_setting(self, key):  
        for line in self.settings:  
            if line.startswith(key):  
                return line.split('=')[1].strip()  
        return None  

class Database:  
    def connect(self):  
        try:  
            # Simulate database connection  
            pass  
        except Exception as e:  
            Log.write_error(f"Connection failed: {e}")  

    def execute_query(self, query):  
        # Simulate query execution  
        pass  

class Report:  
    @staticmethod  
    def generate_report(file_path):  
        try:  
            with open(file_path, 'r') as file:  
                data = file.read()  
                print(data)  
        except FileNotFoundError:  
            Log.write_error("File does not exist or cannot be read.")  


# Real-world Application Exercises  

class Ticket:  
    def __init__(self, movie_name, seat_number, price):  
        self.movie_name = movie_name  
        self.seat_number = seat_number  
        self.price = price  

    def display_details(self):  
        print(f"Ticket for {self.movie_name}, Seat: {self.seat_number}, Price: {self.price}")  

    def apply_discount(self, discount):  
        self.price -= discount  

class Item:  
    def __init__(self, name, price):  
        self.name = name  
        self.price = price  

class ShoppingCart:  
    def __init__(self):  
        self.items = []  

    def add_item(self, item):  
        self.items.append(item)  

    def remove_item(self, item):  
        self.items.remove(item)  

    def display_items(self):  
        for item in self.items:  
            print(f"Item: {item.name}, Price: {item.price}")  

class Restaurant:  
    def __init__(self, name):  
        self.name = name  
        self.menu = []  

    def add_item(self, item):  
        self.menu.append(item)  

    def remove_item(self, item):  
        self.menu.remove(item)  

class Flight:  
    def __init__(self, flight_number, destination):  
        self.flight_number = flight_number  
        self.destination = destination  
        self.passengers = []  

    def add_passenger(self, person):  
        self.passengers.append(person)  

    def remove_passenger(self, person):  
        self.passengers.remove(person)  

class Room:  
    def __init__(self, room_number):  
        self.room_number = room_number  
        self.is_occupied = False  

class Hotel:  
    def __init__(self, name):  
        self.name = name  
        self.rooms = []  

    def add_room(self, room):  
        self.rooms.append(room)  

    def book_room(self, room_number):  
        for room in self.rooms:  
            if room.room_number == room_number and not room.is_occupied:  
                room.is_occupied = True  
                return True  
        return False  

    def check_out(self, room_number):  
        for room in self.rooms:  
            if room.room_number == room_number and room.is_occupied:  
                room.is_occupied = False  
                return True  
        return False  


# GUI Application Exercises (requires tkinter)  

import tkinter as tk  

class CounterApp:  
    def __init__(self, master):  
        self.master = master  
        self.counter = 0  
        self.label = tk.Label(master, text=str(self.counter))  
        self.label.pack()  
        self.increment_button = tk.Button(master, text="Increment", command=self.increment)  
        self.increment_button.pack()  
        self.decrement_button = tk.Button(master, text="Decrement", command=self.decrement)  
        self.decrement_button.pack()  

    def increment(self):  
        self.counter += 1  
        self.label.config(text=str(self.counter))  

    def decrement(self):  
        self.counter -= 1  
        self.label.config(text=str(self.counter))  

class ToDoApp:  
    def __init__(self, master):  
        self.master = master  
        self.tasks = []  
        self.task_entry = tk.Entry(master)  
        self.task_entry.pack()  
        self.add_button = tk.Button(master, text="Add Task", command=self.add_task)  
        self.add_button.pack()  
        self.task_listbox = tk.Listbox(master)  
        self.task_listbox.pack()  

    def add_task(self):  
        task = self.task_entry.get()  
        self.tasks.append(task)  
        self.task_listbox.insert(tk.END, task)  
        self.task_entry.delete(0, tk.END)  

class CalculatorApp:  
    def __init__(self, master):  
        self.master = master  
        self.result = tk.StringVar()  
        self.entry = tk.Entry(master, textvariable=self.result)  
        self.entry.pack()  
        self.buttons_frame = tk.Frame(master)  
        self.buttons_frame.pack()  
        self.create_buttons()  

    def create_buttons(self):  
        buttons = [  
            ('7', 1), ('8', 1), ('9', 1), ('/', 1),  
            ('4', 1), ('5', 1), ('6', 1), ('*', 1),  
            ('1', 1), ('2', 1), ('3', 1), ('-', 1),  
            ('0', 1), ('C', 1), ('=', 1), ('+', 1)  
        ]  
        for (text, _) in buttons:  
            button = tk.Button(self.buttons_frame, text=text, command=lambda t=text: self.on_button_click(t))  
            button.pack(side=tk.LEFT)  

    def on_button_click(self, char):  
        if char == 'C':  
            self.result.set('')  
        elif char == '=':  
            try:  
                self.result.set(eval(self.result.get()))  
            except Exception:  
                self.result.set('Error')  
        else:  
            self.result.set(self.result.get() + char)  

class LoginApp:  
    def __init__(self, master):  
        self.master = master  
        self.username_label = tk.Label(master, text="Username")  
        self.username_label.pack()  
        self.username_entry = tk.Entry(master)  
        self.username_entry.pack()  
        self.password_label = tk.Label(master, text="Password")  
        self.password_label.pack()  
        self.password_entry = tk.Entry(master, show='*')  
        self.password_entry.pack()  
        self.login_button = tk.Button(master, text="Login", command=self.login)  
        self.login_button.pack()  

    def login(self):  
        username = self.username_entry.get()  
        password = self.password_entry.get()  
        print(f"Username: {username}, Password: {password}")  

class WeatherApp:  
    def __init__(self, master):  
        self.master = master  
        self.city_label = tk.Label(master, text="City")  
        self.city_label.pack()  
        self.city_entry = tk.Entry(master)  
        self.city_entry.pack()  
        self.get_weather_button = tk.Button(master, text="Get Weather", command=self.get_weather)  
        self.get_weather_button.pack()  

    def get_weather(self):  
        city = self.city_entry.get()  
        print(f"Getting weather for {city}")  

# To run the GUI applications, uncomment the following lines:  
# root = tk.Tk()  
# app = CounterApp(root)  
# root.mainloop()